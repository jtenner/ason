/// <reference types="assemblyscript/std/assembly/index" />
/// <reference types="assemblyscript/std/assembly/rt/index" />

// These constants are potentially provided the compile --use flag, and tweak how tables
// are created.
declare const ASON_INITIAL_DATA_SEGMENT_TABLE_LENGTH: i32;
declare const ASON_INITIAL_ARRAY_DATA_SEGMENT_TABLE_LENGTH: i32;
declare const ASON_INITIAL_ARRAY_TABLE_LENGTH: i32;
declare const ASON_INITIAL_ARRAY_LINK_TABLE_LENGTH: i32;
declare const ASON_INITIAL_LINK_TABLE_LENGTH: i32;
declare const ASON_INITIAL_REFERENCE_TABLE_LENGTH: i32;
declare const ASON_INITIAL_SET_REFERENCE_TABLE_LENGTH: i32;
declare const ASON_INITIAL_SET_ENTRY_TABLE_LENGTH: i32;
declare const ASON_MAP_REFERENCE_TABLE_LENGTH: i32;
declare const ASON_INITIAL_MAP_KEY_VALUE_PAIR_ENTRY_TABLE_LENGTH: i32;
declare const ASON_INITIAL_CUSTOM_TABLE_LENGTH: i32;
declare const ASON_INITIAL_STATIC_REFERENCE_TABLE_LENGTH: i32;

declare function ason(_: any): any;
declare namespace ASON {
  export class Serializer<T> {
    /**
     * Serialize a given `T`, and return a buffer.
     * @param {T} value - The T to be serialized.
     * @returns {StaticArray<u8>} - A buffer.
     */
    public serialize(value: T): StaticArray<u8>;

  }

  /**
   * A class that deserializes a buffer and assembles a final reference.
   */
  export class Deserializer<T> {
    /**
     * deserialize
     * Deserializes an object T from a StaticArary<u8> generated by the ason Serializer.
     * @param data: Array of u8, representing the serialized object
     * @returns: The deserialized object T
     */
    public deserialize(data: StaticArray<u8>): T;
  }


  /**
   * Serialize a given value. Numeric values will be `Box`ed for you.
   *
   * @param value - The value to be serialized.
   * @returns {StaticArray<u8>} A serialized buffer.
   */
  export function serialize<T>(value: T): StaticArray<u8>;

  /**
   * Deserialize a given ASON buffer.
   *
   * @param buffer - The buffer to be deserialized.
   * @returns {T} - An object of type `T`
   */
  export function deserialize<T>(buffer: StaticArray<u8>): T;
}